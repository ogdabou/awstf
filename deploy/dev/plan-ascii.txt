[0m[1mmodule.infra.data.aws_iam_user.infra: Reading...[0m[0m
[0m[1mmodule.infra.data.aws_iam_user.infra: Read complete after 0s [id=AIDAZQ3DPOTTEKCD32LXV][0m
[0m[1mmodule.infra.data.aws_iam_policy_document.superset_policy: Reading...[0m[0m
[0m[1mmodule.infra.data.aws_iam_policy_document.superset_policy: Read complete after 0s [id=2807484264][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.infra.aws_ecr_repository.superset[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "superset" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "superset"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)

      [32m+[0m[0m image_scanning_configuration {
          [32m+[0m[0m scan_on_push = true
        }
    }

[1m  # module.infra.aws_ecr_repository_policy.super_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository_policy" "super_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "ecr:UploadLayerPart",
                          [32m+[0m[0m "ecr:SetRepositoryPolicy",
                          [32m+[0m[0m "ecr:PutImage",
                          [32m+[0m[0m "ecr:ListImages",
                          [32m+[0m[0m "ecr:InitiateLayerUpload",
                          [32m+[0m[0m "ecr:GetRepositoryPolicy",
                          [32m+[0m[0m "ecr:GetDownloadUrlForLayer",
                          [32m+[0m[0m "ecr:GetAuthorizationToken",
                          [32m+[0m[0m "ecr:DescribeRepositories",
                          [32m+[0m[0m "ecr:DeleteRepositoryPolicy",
                          [32m+[0m[0m "ecr:DeleteRepository",
                          [32m+[0m[0m "ecr:CompleteLayerUpload",
                          [32m+[0m[0m "ecr:BatchGetImage",
                          [32m+[0m[0m "ecr:BatchDeleteImage",
                          [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "AIDAZQ3DPOTTEKCD32LXV"
                        }
                      [32m+[0m[0m Sid       = "new policy"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m registry_id = (known after apply)
      [32m+[0m[0m repository  = "superset"
    }

[1m  # module.infra.aws_kms_key.s3_objects_kms_encryption_key[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "s3_objects_kms_encryption_key" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m deletion_window_in_days            = 20
      [32m+[0m[0m description                        = "Key used to encrypt s3 objects"
      [32m+[0m[0m enable_key_rotation                = false
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # module.infra.aws_s3_bucket.data_s3_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "data_s3_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "awstf-data"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.infra.aws_s3_bucket_server_side_encryption_configuration.example[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "example" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = (known after apply)
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # module.infra.aws_s3_object.lottery_winning_numbers_s3_bucket_object[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "lottery_winning_numbers_s3_bucket_object" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = "csv"
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "csv/lottery.mega_millions_winning_numbers.beginning.2002.csv"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "../../src/resources/Lottery_Mega_Millions_Winning_Numbers__Beginning_2002.csv"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # module.infra.module.athena.data.aws_iam_policy_document.athena_reader_policy[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "athena_reader_policy" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "athena:GetDatabase",
              [32m+[0m[0m "athena:GetQueryExecution",
              [32m+[0m[0m "athena:GetQueryResults",
              [32m+[0m[0m "athena:ListDatabases",
              [32m+[0m[0m "athena:ListQueryExecutions",
              [32m+[0m[0m "athena:StartQueryExecution",
              [32m+[0m[0m "athena:StopQueryExecution",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:Get*",
              [32m+[0m[0m "s3:List*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "sts:AssumeRole",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.infra.module.athena.aws_athena_database.example[0m will be created
[0m  [32m+[0m[0m resource "aws_athena_database" "example" {
      [32m+[0m[0m bucket        = (known after apply)
      [32m+[0m[0m force_destroy = false
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "maindb"
    }

[1m  # module.infra.module.athena.aws_athena_workgroup.awstf_athena_workgroup[0m will be created
[0m  [32m+[0m[0m resource "aws_athena_workgroup" "awstf_athena_workgroup" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m force_destroy = false
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "example"
      [32m+[0m[0m state         = "ENABLED"
      [32m+[0m[0m tags_all      = (known after apply)

      [32m+[0m[0m configuration {
          [32m+[0m[0m enforce_workgroup_configuration    = true
          [32m+[0m[0m publish_cloudwatch_metrics_enabled = true
          [32m+[0m[0m requester_pays_enabled             = false

          [32m+[0m[0m result_configuration {
              [32m+[0m[0m output_location = "s3://athena-mydemo-bucket/output/"

              [32m+[0m[0m encryption_configuration {
                  [32m+[0m[0m encryption_option = "SSE_KMS"
                  [32m+[0m[0m kms_key_arn       = (known after apply)
                }
            }
        }
    }

[1m  # module.infra.module.athena.aws_iam_access_key.athena_reader_access_key[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_access_key" "athena_reader_access_key" {
      [32m+[0m[0m create_date                    = (known after apply)
      [32m+[0m[0m encrypted_secret               = (known after apply)
      [32m+[0m[0m encrypted_ses_smtp_password_v4 = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m key_fingerprint                = (known after apply)
      [32m+[0m[0m secret                         = (sensitive value)
      [32m+[0m[0m ses_smtp_password_v4           = (sensitive value)
      [32m+[0m[0m status                         = "Active"
      [32m+[0m[0m user                           = "athena_reader"
    }

[1m  # module.infra.module.athena.aws_iam_role.athena_reader_iam_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "athena_reader_iam_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "athena_reader"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.infra.module.athena.aws_iam_role_policy.athena_reader_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "athena_reader_role_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "athena_reader_role_policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # module.infra.module.athena.aws_iam_user.athena_reader_iam_user[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_user" "athena_reader_iam_user" {
      [32m+[0m[0m arn           = (known after apply)
      [32m+[0m[0m force_destroy = false
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m name          = "athena_reader"
      [32m+[0m[0m path          = "/"
      [32m+[0m[0m tags_all      = (known after apply)
      [32m+[0m[0m unique_id     = (known after apply)
    }

[1m  # module.infra.module.athena.aws_s3_bucket.athena_s3_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "athena_s3_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "athena-mydemo-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1mPlan:[0m 13 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m access_key        = (known after apply)
  [32m+[0m[0m access_key_secret = (sensitive value)
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
